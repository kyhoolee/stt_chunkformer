# augment/audio_augmenter.py
import torch 
import torchaudio
import torchaudio.functional as F
import random

'''
‚è±Ô∏è So s√°nh t·ªëc ƒë·ªô gi·ªØa c√°c lo·∫°i augmentation
| Augment type             | Th·ªùi gian (t∆∞∆°ng ƒë·ªëi)            | Nguy√™n nh√¢n ch√≠nh             |
| ------------------------ | -------------------------------- | ----------------------------- |
| `vol` (gain)             | ‚ö° R·∫•t nhanh (\~1ms)              | Ch·ªâ l√† nh√¢n h·ªá s·ªë             |
| `telephony` (bandpass)   | ‚ö° Nhanh (\~1‚Äì2ms)                | Ch·ªâ d√πng `biquad filter`      |
| `speed`                  | üê¢ Trung b√¨nh (\~10‚Äì20ms/sample) | G·ªìm 2 l·∫ßn `resample`          |
| `reverb`, `room`         | üêå Ch·∫≠m h∆°n (\~50ms++)           | Convolve v·ªõi impulse response |
| `noise mixing` (wav-add) | ‚ö° Nhanh ‚Äì n·∫øu preload noise      | C·ªông vector ƒë∆°n gi·∫£n          |

‚úÖ C√°ch t·ªëi ∆∞u hi·ªáu qu·∫£
| Chi·∫øn l∆∞·ª£c                               | M√¥ t·∫£                                        | √Åp d·ª•ng                      |
| ---------------------------------------- | -------------------------------------------- | ---------------------------- |
| **Precompute augment offline**           | L∆∞u `.wav` augment ra file ‚Üí load nhanh      | Khi t·∫≠p c·ªë ƒë·ªãnh              |
| **Cache in-memory** (mini batch)         | D√πng `lru_cache` ho·∫∑c `dataset-level buffer` | N·∫øu RAM ƒë·ªß                   |
| **`num_workers > 0`** trong `DataLoader` | TƒÉng song song `__getitem__`                 | B·∫Øt bu·ªôc n·∫øu d√πng on-the-fly |
| **Ch·ªâ augment m·ªôt ph·∫ßn epoch**           | VD: 50% sample augment m·ªói epoch             | Gi·∫£m t·∫£i th·ªùi gian           |


'''

class AudioAugmenter:
    def __init__(self, sample_rate: int):
        self.sr = sample_rate

    def vol_perturb(self, wav):
        factor = 0.8 + (1.2 - 0.8) * torch.rand(1).item()
        return wav * factor

    def speed_perturb(self, wav):
        # speed = torch.choice(torch.tensor([0.9, 1.0, 1.1]))  # or random.uniform
        speed = random.uniform(0.9, 1.1)
        orig_len = wav.shape[1]
        new_sr = int(self.sr * speed)
        wav = torchaudio.transforms.Resample(orig_freq=self.sr, new_freq=new_sr)(wav)
        wav = torchaudio.transforms.Resample(orig_freq=new_sr, new_freq=self.sr)(wav)
        return wav[:, :orig_len]

    def telephony_effect(self, wav):
        return F.bandpass_biquad(wav, self.sr, central_freq=1700.0, Q=0.707)

    def apply(self, wav, mode: str):
        if mode == "vol":
            return self.vol_perturb(wav)
        elif mode == "speed":
            return self.speed_perturb(wav)
        elif mode == "telephony":
            return self.telephony_effect(wav)
        else:
            return wav
