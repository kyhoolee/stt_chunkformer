R·∫•t t·ªët! M√¨nh s·∫Ω gi√∫p b·∫°n hi·ªÉu th·∫≠t **r√µ r√†ng ‚Äì t·ª´ng l·ªõp ‚Äì v·ªÅ CTC** v√† **logic decode c·ªßa m√¥ h√¨nh `ChunkFormer`**.

---

## üß† I. General Idea: **CTC (Connectionist Temporal Classification)**

### 1. B√†i to√°n ƒë·∫∑t ra:

ASR c·∫ßn **map 1 chu·ªói √¢m thanh (T frame)** ‚Üí **1 chu·ªói k√Ω t·ª± (L token)**, nh∆∞ng:

* Kh√¥ng bi·∫øt align ch√≠nh x√°c frame n√†o ·ª©ng v·ªõi k√Ω t·ª± n√†o.
* Frame c√≥ th·ªÉ k√©o d√†i, ch·ªìng l√™n nhau, b·ªã drop...

**CTC ra ƒë·ªùi ƒë·ªÉ gi·∫£i quy·∫øt b√†i to√°n n√†y**: h·ªçc c√°ch **g√°n m·ªói frame ‚Üí 1 nh√£n ho·∫∑c ‚Äúblank‚Äù**, v√† t·ª± h·ªçc c√°ch merge l·∫°i th√†nh c√¢u ho√†n ch·ªânh.

---

### 2. C√°ch ho·∫°t ƒë·ªông:

#### üîÅ Input:

`T` frames ‚Üí qua encoder ‚Üí cho ra `T √ó V` logits
(`V` l√† vocab + 1 blank token `_`)

#### üßÆ Output:

* CTC head: `Linear(hidden_dim ‚Üí vocab_size + blank)`
* D·ª± ƒëo√°n t·∫°i m·ªói timestep: 1 nh√£n ho·∫∑c `_` (blank)

#### üßπ Postprocess (greedy decoding):

```
CTC raw output:      a  a  _  a  _  b  b  _
‚Üí Remove dup:        a     a     b
‚Üí Remove blanks:     a a b
```

\=> K·∫øt qu·∫£: `"aab"`

---

### 3. Training CTC:

* Loss function d√πng **dynamic programming (DP)** ƒë·ªÉ t√≠nh t·ªïng x√°c su·∫•t c·ªßa **t·∫•t c·∫£ c√°c alignment h·ª£p l·ªá**.
* Kh√¥ng c·∫ßn align th·ªß c√¥ng ‚Äî c·ª±c k·ª≥ ph√π h·ª£p cho ASR.

---

## üß≠ II. CTC Decoding Logic trong `ChunkFormer`

### B·∫°n ƒëang d√πng: **Greedy decoding + timestamp tracking**

---

### B∆∞·ªõc 1: `encoder_outs = model.encoder(...)`

* Input `[1, T, 80]` ‚Üí output `[1, T', 512]` (sau subsampling)

---

### B∆∞·ªõc 2: `logits = model.ctc_forward(encoder_outs)`

* Linear projection: `[T', 512]` ‚Üí `[T', vocab_size]`

---

### B∆∞·ªõc 3: `get_output_with_timestamps(logits, char_dict)`

#### G·ªìm c√°c b∆∞·ªõc:

1. **Argmax** m·ªói timestep ‚Üí sequence `[b, b, a, a, _, _, b, b]`
2. **Remove duplicates** ‚Üí `[b, a, _, b]`
3. **Remove blank `_`** ‚Üí `[b, a, b]`
4. **Map index ‚Üí char** qua `char_dict`
5. **T√≠nh start / end timestamp** cho m·ªói nh√£n (frame index √ó frame\_shift)

---

## ‚úÖ T·ªïng k·∫øt: ∆Øu ƒëi·ªÉm decode ki·ªÉu n√†y

| Y·∫øu t·ªë                 | L√Ω do s·ª≠ d·ª•ng                              |
| ---------------------- | ------------------------------------------ |
| ‚ö° Nhanh                | Kh√¥ng beam search, ch·ªâ argmax + cleanup    |
| üí° D·ªÖ debug            | M·ªói b∆∞·ªõc r√µ r√†ng, d·ªÖ ki·ªÉm tra              |
| üß† T·ªëi ∆∞u cho realtime | C√≥ th·ªÉ decode t·ª´ng chunk nh·ªè (streaming)   |
| ‚è± C√≥ timestamp         | Ph√π h·ª£p v·ªõi speech analytics, callbot, ... |

---

## üß∞ T√≥m t·∫Øt l·∫°i pipeline b·∫°n ƒëang c√≥:

```
[Audio Waveform]
   ‚Üì
[Log Mel FBanks] (fbank)
   ‚Üì
[Encoder (ChunkFormer)]
   ‚Üì
[CTC Linear + Softmax]
   ‚Üì
[Argmax ‚Üí Remove Dup ‚Üí Remove Blank]
   ‚Üì
[Text + Timestamp]
```


